Task 1 : Write a blog on Difference between HTTP1.1 vs HTTP2

HTTP :

HTTP stands for hypertext transfer protocol & it is used in client-server communication. 
By using HTTP user sends the request to the server & the server sends the response to the user.
-----------------------------
HTTP/1.1:

created in 1997
let’s assume when we make a request to the server for the abc.html page & server responds to you as a resource abc.html page. 
before sending the request and the response there is a TCP connection established between client & server. 
again when we make a request to the server for image img.jpg & the server gives a response as an image img.jpg. 
But the connection was not lost here after the first request because we add a keep-alive header which is the part of the request 
so there is an open connection between the server & client so there is a persistent connection which means several requests & responses are merged in a single connection.
--------------------------------------------
Drawbacks led to creation of HTTP/2:

1) The first problem is HTTP/1.1 transfer all the requests & responses in the plain text message form. 
2) The second one is head of line blocking in which TCP connection is blocked all other requests until the response does not receive.
all the information related to the header file is repeated in every request.
----------------------------------------------
HTTP/2.2:

HTTP/2 which was created in 2015.
HTTP/2 was developed over the SPDY protocol. 
HTTP/2 works on the binary framing layer instead of textual that converts all the messages in binary format. 
it works on fully multiplexed that is one TCP connection is used for multiple requests. 
HTTP/2 uses HPACK which is used to split data from header. it compresses the header. 
The server sends all the other files like CSS & JS without the request of the client using the PUSH frame
--------------------------------------------------
Difference between HTTP/1.1 VS HTTP/2:

HTTP/1.1 : It works on textual format
HTTP/2   : It works on binary protocol

HTTP/1.1 : There is head of line blocking that blocks all the requests behind it until it doesn’t get its all resources.
HTTP/2   : It allows multiplexing so one TCP connection is required for multiple requests.


HTTP/1.1 : It uses requests resource Inlining for use getting multiple pages
HTTP/2   : It uses PUSH frame by server that collects all multiple pages 

HTTP/1.1 : It compresses data by itself.
HTTP/2   : It uses HPACK for data compression.

**********************************************************************************************************

**********************************************************************************************************

Task 2 : Write a blog about objects and its internal representation in Javascript

Objects in Javascript:

Objects, in JavaScript, are the most important data type and form the building blocks for modern JavaScript. 
These objects are quite different from JavaScript’s primitive data types (Number, String, Boolean, null, undefined, and symbol) 
in the sense that these primitive data types all store a single value each (depending on their types).

While these primitive data types can each hold only a single value, objects are like containers that can hold multiple values at once. 
These values are stored as properties of the object, each with its own key. 
This allows us to group related data and functions together, making code more organised and easier to understand.

Syntax:

new Object(value)
Object(value)
let object_name = {
    key_name : value,
    ...
}

Object()  can be called with or without new. Both create a new object.

// JavaScript code demonstrating a simple object
let school = {
    name: 'Vivekananda School',
    location: 'Delhi',
    established: '1971',
    displayInfo: function () {
        console.log(`${school.name} was established 
              in ${school.established} at ${school.location}`);
    }
}
school.displayInfo();   

In this example “name”, “location”, and “established” are all “keys” and “Vivekananda School”, “Delhi” and 1971 are values of these keys respectively. 
Each of these keys is referred to as properties of the object. 
An object in JavaScript may also have a function as a member, in which case it will be known as a method of that object. 
Here  “displayinfo” is a method of the school object that is being used to work with the object’s data, stored in its properties.

Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value.
 That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
Loosely speaking, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs.
 These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

An object can be created with figure brackets {…} with an optional list of properties. 
A property is a “key: value” pair, where a key is a string or a symbol (also called a “property name”), and the value can be anything 
including numbers, strings, booleans, functions, arrays, or even other objects.

JavaScript Object Properties:

The property names can be strings or numbers. In case the property names are numbers, they must be accessed using the “bracket notation” like this.

let school = {
    name: 'Vivekananda School',
    location: 'Delhi',
    established: '1971',
    20: 1000,
    displayInfo: function () {
        console.log(`The value of the key 20 is ${school['20']}`);
    }
}
school.displayInfo();  

But more on the bracket notation later. Property names can also be strings with more than one space separated words. 
In which case, these property names must be enclosed in quotes :

// Bracket notation 
let school = {
    name: 'Vivekananda School',
    displayInfo: function () {
        console.log(`${school.name.split(' ')[0]}`);
    }
}
school.displayInfo(); // Vivekananda

Inherited Properties:

Inherited properties of an object are those properties that have been inherited from the object’s prototype,
 as opposed to being defined for the object itself, which is known as the object’s Own property.
 To verify if a property is an object’s Own property, we can use the hasOwnProperty method.
 Property Attributes Data properties in JavaScript have four attributes.

value: The property’s value.
writable: When true, the property’s value can be changed
enumerable: When true, the property can be iterated over by “for-in” enumeration. Otherwise, the property is said to be non-enumerable.
configurable: If false, attempts to delete the property, change the property to be an access-or property, 
or change its attributes (other than [[Value]], or changing [[Writable]] to false) will fail.

// hasOwnProperty code in js
const object1 = new Object();
object1.property1 = 42;

console.log(object1.hasOwnProperty('property1')); // true

Accessing Object Members:

Object members(properties or methods) can be accessed using the dot notation

let school = { 
    name : "Vivekanada", 
    location : "Delhi", 
    established : 1971,
    20 : 1000, 
    displayinfo : function() { 
        console.log(`${school.name} was established 
        in ${school.established} at ${school.location}`); 
    } 

} 
console.log(school.name); 

console.log(school.established); 

Iterating over all keys of an object:

To iterate over all existing enumerable keys of an object, we may use the for…in construct. 
It is worth noting that this allows us to access only those properties of an object which are enumerable 
(Recall that enumerable is one of the four attributes of data properties). For instance, properties inherited from the Object.
prototype are not enumerable. But, enumerable properties inherited from somewhere can also be accessed using the for…in construct

let person = {
    gender: "male"
}

let person1 = Object.create(person);
person1.name = "Adam";
person1.age = 45;
person1.nationality = "Australian";

for (let key in person1) {
    // Output : name, age, nationality 
    // and gender
    console.log(key);
}    

Deleting Properties:

To Delete a property of an object we can make use of the delete operator. An example of its usage has been listed below.

let obj1 = { 
    propfirst : "Name"
} 

// Output : Name 
console.log(obj1.propfirst); 
delete obj1.propfirst 

// Output : undefined 
console.log(obj1.propfirst); 

***************************************************************************************************
***************************************************************************************************





